"use strict";exports.__esModule=true;exports.default=void 0;function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}const genDefaultOptions=()=>({regex:/\$s\(([a-zA-Z0-9_\$]+),([^,]+),([^(;\))]*)\);/,maxReplacementCount:1000});var _default={type:"postProcessor",name:"select",options:genDefaultOptions(),updateOptions(options){this.options=_extends({},this.options,{},options);return this},process(value,_,options,translator){if(Object.prototype.toString.call(options.postProcess)==="[object String]"){delete options.postProcess}else{options.postProcess.splice(options.postProcess.find(name=>name===this.name),1)}let count=1;while(count++<this.options.maxReplacementCount){const result=this.options.regex.exec(value);if(result===null)break;const[matchedString,key,expect,string]=result;const beforePart=value.slice(0,result.index);const endPart=value.slice(result.index+matchedString.length);if(options[key]===JSON.parse(expect)){value=beforePart+string+endPart}else{value=beforePart+endPart}}return translator.translate(value,options)}};exports.default=_default;